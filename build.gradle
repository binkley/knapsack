buildscript {
    ext {
        hamkrest_version = '1.4.2.0'
        hsqldb_version = '2.4.0'
        jgit_version = '4.8.0.201706111038-r'
        kotlin_version = '1.2.0-beta-31'
        mockito_version = '2.10.0'
        mockito_kotlin_version = '1.5.0'
        versions_version = '0.15.0'
    }

    repositories {
        maven { url 'https://plugins.gradle.org/m2' }
        mavenCentral()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap-1.2' }
    }

    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:$versions_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group = 'hm.binkley.knapsack'
version = '0-SNAPSHOT'

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'kotlin'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

sourceSets {
    mockTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
    liveTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output + configurations.default
        }
    }
}

configurations {
    testRuntime.exclude module: 'hsqldb'
    mockTestCompile.extendsFrom testCompile
    mockTestRuntime.extendsFrom testRuntime
    liveTestCompile.extendsFrom testCompile
    liveTestRuntime.extendsFrom testRuntime
    ktlint
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jre8'
    compile 'org.jetbrains.kotlin:kotlin-reflect'
    compile "org.eclipse.jgit:org.eclipse.jgit:$jgit_version"
    runtime "org.hsqldb:hsqldb:$hsqldb_version"
    testCompile 'org.jetbrains.kotlin:kotlin-test-junit'
    testCompile "com.natpryce:hamkrest:$hamkrest_version"
    mockTestCompile "org.mockito:mockito-core:$mockito_version"
    mockTestCompile "com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin_version"
}

clean {
    delete 'out'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        apiVersion = '1.2'
        javaParameters = true
        jvmTarget = '1.8'
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat = 'full'
    }
}

task mockTest(type: Test) {
    group = 'Verification'
    description = 'Runs the mock tests.'
    dependsOn test

    testClassesDirs = sourceSets.mockTest.output.classesDirs
    classpath = sourceSets.mockTest.runtimeClasspath
}

task liveTest(type: Test) {
    group = 'Verification'
    description = 'Runs the live tests.'
    dependsOn test

    testClassesDirs = sourceSets.liveTest.output.classesDirs
    classpath = sourceSets.liveTest.runtimeClasspath
}

jacoco {
    toolVersion = '0.7.10-SNAPSHOT'
}

jacocoTestReport {
    dependsOn mockTest, liveTest

    executionData(test, mockTest, liveTest)
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['hm.binkley.knapsack.Database.*.*',
                        'hm.binkley.knapsack.Value.DatabaseValue',
                        'hm.binkley.knapsack.Value.RuleValue',
                        'hm.binkley.knapsack.DatabaseEntry',
                        'hm.binkley.knapsack.DatabaseSet',
                        'hm.binkley.knapsack.DatabaseMap',
                        'hm.binkley.knapsack.DatabaseList',
                        'hm.binkley.knapsack.Ruck',
                        'hm.binkley.knapsack.Value.IntValue.*']
            limit {
                minimum = 0.96
            }
        }
        rule {
            element = 'CLASS'
            includes = ['hm.binkley.knapsack.Value.DatabaseList']
            limit {
                minimum = 0.90
            }
        }
        rule {
            element = 'CLASS'
            includes = ['hm.binkley.knapsack.Value.DatabaseValue']
            limit {
                minimum = 0.94
            }
        }
        rule {
            element = 'CLASS'
            includes = ['hm.binkley.knapsack.Value.RuleValue']
            limit {
                minimum = 0.88
            }
        }
        rule {
            element = 'CLASS'
            includes = ['hm.binkley.knapsack.DatabaseMap']
            limit {
                minimum = 0.90
            }
        }
        rule {
            element = 'CLASS'
            includes = ['hm.binkley.knapsack.DatabaseSet']
            limit {
                minimum = 0.89
            }
        }
        rule {
            element = 'CLASS'
            includes = ['hm.binkley.knapsack.DatabaseEntry']
            limit {
                minimum = 0.89
            }
        }
        rule {
            element = 'CLASS'
            includes = ['hm.binkley.knapsack.Ruck']
            limit {
                minimum = 0.88
            }
        }
    }
    executionData(test, mockTest, liveTest)
}

check {
    dependsOn jacocoTestCoverageVerification
}

buildscript {
    ext {
        hamkrest_version = '1.4.2.0'
        hsqldb_version = '2.4.0'
        jgit_version = '4.8.0.201706111038-r'
        kassava_version = '1.0.0'
        kotlin_version = '1.2-M2'
        mockito_version = '2.8.47'
    }

    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap-1.2' }
        maven { url 'https://plugins.gradle.org/m2' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group = 'hm.binkley.knapsack'
version = '0-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

sourceSets {
    applicationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
}

configurations {
    applicationTestCompile.extendsFrom testCompile
    applicationTestRuntime.extendsFrom testRuntime
    ktlint
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jre8'
    compile 'org.jetbrains.kotlin:kotlin-reflect'
    compile "au.com.console:kassava:$kassava_version"
    compile "org.eclipse.jgit:org.eclipse.jgit:$jgit_version"
    runtime "org.hsqldb:hsqldb:$hsqldb_version"
    testCompile 'org.jetbrains.kotlin:kotlin-test-junit'
    testCompile "com.natpryce:hamkrest:$hamkrest_version"
    testCompile "org.mockito:mockito-core:$mockito_version"
}

clean {
    delete 'out'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

task applicationTest(type: Test) {
    dependsOn test
    testClassesDirs = sourceSets.applicationTest.output.classesDirs
    classpath = sourceSets.applicationTest.runtimeClasspath

    testLogging {
        exceptionFormat = 'full'
    }
}

jacoco {
    toolVersion = '0.7.10-SNAPSHOT'
}

jacocoTestReport {
    executionData(test, applicationTest)

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    excludes: ['hm/binkley/knapsack/Database.class',
                               'hm/binkley/knapsack/Database$*.class',
                               'hm/binkley/knapsack/DatabaseEntry$*.class'])
        })
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['hm.binkley.knapsack.Database',
                        'hm.binkley.knapsack.Database.*',
                        'hm.binkley.knapsack.DatabaseEntry.*']
            limit {
                minimum = 0.88
            }
        }
    }
    executionData(test, applicationTest)
}

task downloadDependencies(type: Exec) {
    configurations.testRuntime.files
    commandLine 'true'
}

check {
    dependsOn applicationTest
    dependsOn jacocoTestCoverageVerification
}
